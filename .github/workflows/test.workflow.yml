name: DepthAI Core HIL Testing

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

# Only allow latest run on same branch to be tested
concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

jobs:

  # The precheck job determines whether a workflow should be run in full
  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
    - name: Evaluate trigger condition
      id: check
      run: |
        EVENT_NAME="${{ github.event_name }}"

        RAW_LABELS='${{ toJson(github.event.pull_request.labels) }}'
        if [[ "$RAW_LABELS" == "null" || -z "$RAW_LABELS" ]]; then
          LABELS="[]"
        else
          LABELS="$RAW_LABELS"
        fi

        SHOULD_RUN="true"
        if [[ "$EVENT_NAME" == "pull_request" ]]; then
          if ! echo "$LABELS" | jq -r '.[].name' | grep -q "testable"; then
            SHOULD_RUN="false"
          fi
        fi

        echo "should_run=$SHOULD_RUN" >> "$GITHUB_OUTPUT"

  run_vanilla_tests:
    needs: [precheck]
    if: needs.precheck.outputs.should_run == 'true'
    uses: ./.github/workflows/test_child.yml
    with:
      flavor: "vanilla"
      luxonis_os_versions_to_test: "['1.14.1', '1.15.0', '1.18.3']"
      luxonis_os_versions_to_test_rgb: "['1.18.3']"
    secrets:
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      HIL_PAT_TOKEN: ${{ secrets.HIL_PAT_TOKEN }}

  run_tsan_tests:
    needs: [precheck]
    if: needs.precheck.outputs.should_run == 'true'
    uses: ./.github/workflows/test_child.yml
    with:
      flavor: "tsan"
      luxonis_os_versions_to_test: "['1.18.3']"
    secrets:
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      HIL_PAT_TOKEN: ${{ secrets.HIL_PAT_TOKEN }}

  run_asan-ubsan_tests:
    needs: [precheck]
    if: needs.precheck.outputs.should_run == 'true'
    uses: ./.github/workflows/test_child.yml
    with:
      flavor: "asan-ubsan"
      luxonis_os_versions_to_test: "['1.18.3']"
    secrets:
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      HIL_PAT_TOKEN: ${{ secrets.HIL_PAT_TOKEN }}

  windows_rvc2_rvc4_test:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
      VCPKG_ROOT: C:\vcpkg
      # Enable vcpkg manifest + binary caching
      VCPKG_FEATURE_FLAGS: manifests,registries,binarycaching
      # Triplet tweak if you use something else
      VCPKG_DEFAULT_TRIPLET: x64-windows
      VCPKG_DOWNLOADS: C:\vcpkg_downloads
      VCPKG_DEFAULT_BINARY_CACHE: C:\vcpkg_binaries
    steps:

    # - name: Try reuse existing artifact for this SHA
    #   id: reuse
    #   shell: pwsh
    #   env:
    #     GH_TOKEN: ${{ github.token }}
    #     REPO: ${{ github.repository }}
    #     ARTIFACT_NAME: depthai-core-win-${{ github.sha }}
    #   run: |
    #     # Find an artifact with the exact name for this commit
    #     $id = gh api repos/$env:REPO/actions/artifacts --paginate `
    #       --jq ".artifacts[] | select(.name==""$env:ARTIFACT_NAME"") | .id" | Select-Object -First 1

    #     if ($id) {
    #       Write-Host "Found artifact id=$id. Skipping build..."
    #       "skip_build=true" >> $env:GITHUB_OUTPUT
    #     } else {
    #       Write-Host "No prior artifact found for $env:ARTIFACT_NAME"
    #       "skip_build=false" >> $env:GITHUB_OUTPUT
    #     }

    - name: Ensure cache dirs
      shell: powershell
    #  if: steps.reuse.outputs.skip_build != 'true'
      run: |
        New-Item -ItemType Directory -Force -Path "C:\vcpkg_binaries" | Out-Null

    - name: Checkout depthai
      uses: actions/checkout@v4
    #  if: steps.reuse.outputs.skip_build != 'true'
      with:
        submodules: recursive
        path: C:\

    - name: Setup Python 3.13.7
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.7'
        cache: 'pip'
        path: C:\depthai-core

    - name: Cache vcpkg binary cache
      uses: actions/cache@v4
    #  if: steps.reuse.outputs.skip_build != 'true'
      with:
        path: C:\vcpkg_binaries
        key: vcpkg-archives-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_DEFAULT_TRIPLET }}
        restore-keys: |
          vcpkg-archives-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_DEFAULT_TRIPLET }}

    - name: Configure and Build
    #  if: steps.reuse.outputs.skip_build != 'true'
      run: |
        cd C:\depthai-core
        $isPR = "${{ github.head_ref }}" -ne ""
        $extraFlags = ""

        if (-not $isPR) {
          $extraFlags = @(
            '-DDEPTHAI_BUILD_EXAMPLES=ON',
            '-DDEPTHAI_BUILD_PYTHON=ON',
            '-DDEPTHAI_PYTHON_ENABLE_TESTS=ON',
            '-DDEPTHAI_TEST_EXAMPLES=ON',
            '-DDEPTHAI_PYTHON_TEST_EXAMPLES=ON',
            '-DDEPTHAI_PYTHON_ENABLE_EXAMPLES=ON'
          ) -join ' '
        }
        
        pip install --upgrade pip
        pip install numpy pytest pytest-html

        $cmakeConfigureCommand = "cmake -S . -B C:/depthai-core/build -D CMAKE_BUILD_TYPE=Release -DDEPTHAI_VCPKG_INTERNAL_ONLY=OFF -DVCPKG_OVERLAY_TRIPLETS=./cmake/triplets/release -DDEPTHAI_BUILD_TESTS=ON $extraFlags"
        Write-Host "Running: $cmakeConfigureCommand"
        Invoke-Expression $cmakeConfigureCommand

        $cmakeBuildCommand = "cmake --build C:/depthai-core/build --parallel 2 --config Release"
        Write-Host "Running: $cmakeBuildCommand"
        Invoke-Expression $cmakeBuildCommand

    - name: Upload artifact
    #  if: steps.reuse.outputs.skip_build != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: depthai-core-win-${{ github.sha }}
        path: C:\depthai-core
        retention-days: 1

