name: Run hil tests for windows
on:
  workflow_call:
    inputs:
      luxonis_os_versions_to_test:
        required: true
        type: string
    secrets:
      CONTAINER_REGISTRY:
        required: true
      HIL_PAT_TOKEN:
        required: true

jobs:
  build_windows_tests:
    runs-on: windows-latest
    outputs: 
        artifact_id: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    env:
      BUILD_TYPE: Release
      VCPKG_ROOT: C:\vcpkg
      VCPKG_FEATURE_FLAGS: manifests,registries,binarycaching
      VCPKG_DEFAULT_TRIPLET: x64-windows
      VCPKG_DOWNLOADS: C:\vcpkg_downloads
      VCPKG_DEFAULT_BINARY_CACHE: C:\vcpkg_binaries
    steps:

    - name: Try reusing existing artifact for this commit
      id: reuse
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
        REPO: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
        ARTIFACT_NAME: depthai-core-win-${{ github.sha }}
      run: |
        Write-Host "REPO=$env:REPO  RUN_ID=$env:RUN_ID  NAME=$env:ARTIFACT_NAME"
        $id = gh api "repos/$env:REPO/actions/runs/$env:RUN_ID/artifacts" `
          --jq ".artifacts[] | select(.name==""$env:ARTIFACT_NAME"") | .id"
        if ($id) {
          "skip_build=true"  >> $env:GITHUB_OUTPUT
          "artifact_id=$id"  >> $env:GITHUB_OUTPUT
          Write-Host "Found artifact id=$id on this run; skipping build."
        } else {
          "skip_build=false" >> $env:GITHUB_OUTPUT
          Write-Host "No artifact named $env:ARTIFACT_NAME on this run."
        }


    - name: Checkout depthai
      uses: actions/checkout@v4
      if: steps.reuse.outputs.skip_build != 'true'
      with:
        submodules: recursive

    - name: Ensure cache dirs and build dir
      shell: powershell
      if: steps.reuse.outputs.skip_build != 'true'
      run: |
        New-Item -ItemType Directory -Force -Path "C:\vcpkg_binaries" | Out-Null
        New-Item -ItemType Directory -Force -Path "C:\depthai-core" | Out-Null
        Write-Host "Copying source from $env:GITHUB_WORKSPACE to C:\depthai-core ..."
        Copy-Item -Path "$env:GITHUB_WORKSPACE\*" -Destination "C:\depthai-core" -Recurse -Force

    - name: Cache vcpkg binary cache
      uses: actions/cache@v4
      if: steps.reuse.outputs.skip_build != 'true'
      with:
        path: C:\vcpkg_binaries
        key: vcpkg-archives-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_DEFAULT_TRIPLET }}
        restore-keys: |
          vcpkg-archives-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_DEFAULT_TRIPLET }}

    - name: Configure and Build
      if: steps.reuse.outputs.skip_build != 'true'
      run: |
        cd C:\depthai-core
        Invoke-WebRequest `
          -Uri "https://github.com/winpython/winpython/releases/download/17.2.20250920/WinPython64-3.13.7.0dotrc.zip" `
          -OutFile "winpython.zip"
        New-Item -ItemType Directory -Force -Path "C:\depthai-core\winpython" | Out-Null
        Expand-Archive -Path winpython.zip -DestinationPath "C:\depthai-core\winpython"
        $PYROOT = "C:\depthai-core\winpython\WPy64-31700\python\"
        C:\depthai-core\winpython\WPy64-31700\python\python.exe -m venv venv
        .\venv\Scripts\Activate.ps1
        python -c "import sys; print('using:', sys.executable)"
        pip install --upgrade pip
        pip install numpy pytest pytest-html
        $buildDir = 'C:/depthai-core/build'
        $overlay  = 'C:/depthai-core/cmake/triplets/release'  # make it absolute
        $isPR = "${{ github.head_ref }}" -ne ""
        $extraFlags = ""

        # Base args
        $cmakeArgs = @(
          '-S','.',
          '-B', $buildDir,
          '-DCMAKE_BUILD_TYPE=Release',
          '-DDEPTHAI_VCPKG_INTERNAL_ONLY=OFF',
          "-DVCPKG_OVERLAY_TRIPLETS=$overlay",
          '-DDEPTHAI_BUILD_TESTS=ON'
        )

        # Conditionally add extras (only on non-PR builds)
        if (-not $isPR) {
          $cmakeArgs += @(
            '-DDEPTHAI_BUILD_EXAMPLES=ON',
            '-DDEPTHAI_BUILD_PYTHON=ON',
            '-DDEPTHAI_PYTHON_ENABLE_TESTS=ON',
            '-DDEPTHAI_TEST_EXAMPLES=ON',
            '-DDEPTHAI_PYTHON_TEST_EXAMPLES=ON',
            '-DDEPTHAI_PYTHON_ENABLE_EXAMPLES=ON'
          )
        }

        # Show & run
        Write-Host "cmake args:`n$($cmakeArgs -join ' ')"
        & cmake @cmakeArgs

        $cmakeBuildCommand = "cmake --build C:/depthai-core/build --parallel 2 --config Release"
        Write-Host "Running: $cmakeBuildCommand"
        Invoke-Expression $cmakeBuildCommand

    - name: Upload artifact
      if: steps.reuse.outputs.skip_build != 'true'
      id: artifact-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: depthai-core-win-${{ github.sha }}
        path: C:\depthai-core
        retention-days: 1

  run_windows_tests:
    needs: [build_windows_tests]
    strategy:
        matrix:
          rvc4os: ${{ fromJson(inputs.luxonis_os_versions_to_test) }}
        fail-fast: false
    runs-on: ['self-hosted', 'testbed-runner']
    steps:

      - name: Run RVC4 tests
        run: |
          source scripts/hil/prepare_hil_framework.sh ${{ secrets.HIL_PAT_TOKEN }}
          export RESERVATION_NAME="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID#rvc4-windows-${{ matrix.rvc4os }}"
          exec hil --models "oak4_pro or oak4_d" -os windows --reservation-name %RESERVATION_NAME% --wait --rvc4-os-version ${{ matrix.rvc4os }} --commands "rmdir /S /Q depthai-core && git clone -b ${{ github.ref_name }} https://github.com/luxonis/depthai-core.git && cd depthai-core && scripts\hil\get_artifacts_and_run_tests.cmd \"${{ github.repository }}\" \"${{ github.token }}\" \"C:\depthai-core\" \"${{ needs.build_windows_tests.outputs.artifact_id }}\""

    