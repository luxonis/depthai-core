syntax = "proto3";

import "common.proto";
package dai.proto.dynamic_calibration;
// Reusable 1D float array
message FloatArray {
  repeated float values = 1 [packed = true];
}

// 2D arrays encoded as rows of FloatArray
message Float2D {
  repeated FloatArray rows = 1;
}

// Coverage data collected per frame (both cameras)
message CoverageData {
  Float2D coveragePerCellA = 1;
  Float2D coveragePerCellB = 2;
  float meanCoverage = 3;
  float coverageAcquired = 4;
  float dataAcquired = 5;
}

// Calibration quality “difference” metrics
message CalibrationQualityData {
  // size == 3 (deg around x,y,z)
  repeated float rotationChange = 1 [packed = true];
  repeated float depthErrorDifference = 2 [packed = true]; // arbitrary length
  float sampsonErrorCurrent = 3;
  float sampsonErrorNew = 4;
}

message CalibrationQuality {
  // If unavailable we omit (interpret as “intermediate info only”)
  CalibrationQualityData data = 1; // optional in practice; in proto3 presence comes via field existence
  string info = 2;
}

// A generic blob for CalibrationHandler (format lets you choose json/bin)
message CalibrationBlob {
  bytes data = 1;
  string format = 2; // "json" or "bin"
}

message DynamicCalibrationResultData {
  CalibrationBlob newCalibration = 1;
  CalibrationBlob currentCalibration = 2;
  CalibrationQualityData calibrationDifference = 3;
}

message DynamicCalibrationResult {
  DynamicCalibrationResultData calibrationData = 1; // omit if only info available
  string info = 2;
}